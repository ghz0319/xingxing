name: Update GitHub Starred Projects Index

on:
  workflow_dispatch:
  schedule:
    - cron: '0 6 * * *'  # ÊØèÂ§© UTC 6:00ÔºàÂåó‰∫¨Êó∂Èó¥ 14:00ÔºâËá™Âä®ÊâßË°å

jobs:
  update-stars:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install dependencies
        run: pip install requests matplotlib

      - name: Generate stars.md and language chart
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          mkdir -p scripts
          cat > scripts/update_stars.py <<'EOF'
          import requests, datetime, os, collections, matplotlib.pyplot as plt

          GH_TOKEN = os.getenv("GH_TOKEN")
          user = "ghz0319"
          headers = {"Authorization": f"token {GH_TOKEN}"} if GH_TOKEN else {}

          url = f"https://api.github.com/users/{user}/starred?per_page=100"
          md = [
              "# üåü GitHub Starred Projects Index\n",
              f"_Last updated: {datetime.datetime.now(datetime.UTC).strftime('%Y-%m-%d %H:%M:%S')} UTC_\n\n"
          ]

          total = 0
          lang_count = collections.Counter()
          by_lang = collections.defaultdict(list)

          while url:
              r = requests.get(url, headers=headers)
              if r.status_code != 200:
                  raise SystemExit(f"‚ùå GitHub API Error: {r.status_code}")
              data = r.json()
              for repo in data:
                  total += 1
                  name = repo["full_name"]
                  html = repo["html_url"]
                  desc = repo.get("description") or ""
                  lang = repo.get("language") or "üóÇÔ∏è Others"
                  by_lang[lang].append(f"- [{name}]({html}) ‚Äî {desc.strip()}\n")
                  lang_count[lang] += 1
              url = r.links.get("next", {}).get("url")

          md.insert(1, f"**Total Starred Repositories:** {total} ‚≠ê\n\n")

          for lang, repos in sorted(by_lang.items(), key=lambda x: (-len(x[1]), x[0].lower())):
              md.append(f"## {lang} ({len(repos)})\n")
              md.extend(repos)
              md.append("\n")

          with open("stars.md", "w", encoding="utf-8") as f:
              f.writelines(md)

          # --- ‰øùÂ≠òÁªüËÆ°Êï∞ÊçÆÔºåÁî®‰∫é README Êõ¥Êñ∞ ---
          now = datetime.datetime.now(datetime.UTC).strftime('%Y-%m-%d %H:%M:%S')
          with open("sync_info.txt", "w") as f:
              f.write(f"{total}|{now}")

          # --- ÁîüÊàêËØ≠Ë®ÄÈ•ºÂõæ ---
          if lang_count:
              labels = list(lang_count.keys())
              sizes = list(lang_count.values())
              plt.figure(figsize=(6, 6))
              plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=140)
              plt.title(f"Language Distribution ({total} repos)")
              plt.tight_layout()
              plt.savefig("lang_chart.svg", format="svg")
              print("‚úÖ Language chart generated: lang_chart.svg")
          else:
              print("‚ö†Ô∏è No language data found.")
          EOF

          python scripts/update_stars.py

      - name: Update README badges and chart
        run: |
          set +e
          if [ -f sync_info.txt ]; then
            IFS='|' read total lastsync < sync_info.txt
            echo "‚úÖ Updating README.md with total=$total, lastsync=$lastsync"

            # Êõ¥Êñ∞ÊòüÊ†áÊÄªÊï∞
            if grep -q "üåü Total Stars:" README.md; then
              sed -i "s/üåü Total Stars:.*/üåü Total Stars: ${total}/" README.md
            else
              echo "üåü Total Stars: ${total}" >> README.md
            fi

            # Êõ¥Êñ∞Êó∂Èó¥
            if grep -q "‚è∞ Last Sync:" README.md; then
              sed -i "s/‚è∞ Last Sync:.*/‚è∞ Last Sync: ${lastsync} UTC/" README.md
            else
              echo "‚è∞ Last Sync: ${lastsync} UTC" >> README.md
            fi

            # Êõ¥Êñ∞ËØ≠Ë®ÄÈ•ºÂõæÂºïÁî®
            if grep -q "![Language Chart]" README.md; then
              echo "üñº Updating existing chart reference"
            else
              echo -e "\n## üß© Language Distribution\n\n![Language Chart](lang_chart.svg)\n" >> README.md
            fi
          else
            echo "‚ö†Ô∏è sync_info.txt not found, skipping README update."
          fi
          set -e

      - name: Commit and push changes
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

          git add stars.md README.md lang_chart.svg || true
          if git diff --cached --quiet; then
            echo "üü¢ No changes to commit."
          else
            git commit -m "Auto update stars.md, README.md and chart"
            git push https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }}.git HEAD:main
          fi
