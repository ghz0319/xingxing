name: Update GitHub Starred Projects Index

on:
  workflow_dispatch:
  schedule:
    - cron: '0 6 * * *'

jobs:
  update-stars:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install requests matplotlib

      - name: Generate stars section only
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          cat > scripts/update_stars.py <<'EOF'
          import requests, os, datetime, collections, matplotlib.pyplot as plt, re, io

          user = "ghz0319"
          token = os.getenv("GH_TOKEN")
          headers = {"Authorization": f"token {token}"} if token else {}
          url = f"https://api.github.com/users/{user}/starred?per_page=100"

          total = 0
          langs = collections.Counter()
          by_lang = collections.defaultdict(list)
          now = datetime.datetime.now(datetime.UTC).strftime('%Y-%m-%d %H:%M:%S')

          while url:
              r = requests.get(url, headers=headers)
              data = r.json()
              for repo in data:
                  total += 1
                  lang = repo.get("language") or "🗂️ Others"
                  name = repo["full_name"]
                  html = repo["html_url"]
                  desc = repo.get("description") or ""
                  by_lang[lang].append(f"- [{name}]({html}) — {desc.strip()}\n")
                  langs[lang] += 1
              url = r.links.get("next", {}).get("url")

          # --- 生成语言饼图 ---
          if langs:
              plt.figure(figsize=(6, 6))
              plt.pie(langs.values(), labels=langs.keys(), autopct='%1.1f%%', startangle=140)
              plt.title(f"Language Distribution ({total} repos)")
              plt.tight_layout()
              plt.savefig("lang_chart.svg")

          # --- 构建更新区块 ---
          content = io.StringIO()
          content.write(f"**Total Starred Repositories:** {total} ⭐\n\n")
          content.write(f"_Last updated: {now} UTC_\n\n")

          for lang, repos in sorted(by_lang.items(), key=lambda x: (-len(x[1]), x[0])):
              content.write(f"## {lang} ({len(repos)})\n")
              content.writelines(repos)
              content.write("\n")

          new_block = content.getvalue()

          # --- 只替换 stars.md 的自动更新区 ---
          path = "stars.md"
          start_marker = "<!-- AUTO-GENERATED START -->"
          end_marker = "<!-- AUTO-GENERATED END -->"

          if os.path.exists(path):
              text = open(path, encoding="utf-8").read()
          else:
              text = "# 🌟 GitHub Starred Projects Index\n\n"

          if start_marker in text and end_marker in text:
              updated = re.sub(f"{start_marker}.*?{end_marker}",
                               f"{start_marker}\n{new_block}\n{end_marker}",
                               text, flags=re.S)
          else:
              updated = text + f"\n\n{start_marker}\n{new_block}\n{end_marker}\n"

          with open(path, "w", encoding="utf-8") as f:
              f.write(updated)
          print("✅ stars.md updated safely without losing header.")
          EOF

          python scripts/update_stars.py

      - name: Commit and push
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add stars.md lang_chart.svg || true
          git commit -m "Update stars section safely" || echo "No changes"
          git push
